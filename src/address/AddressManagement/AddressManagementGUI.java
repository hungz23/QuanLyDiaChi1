/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package address.AddressManagement;

import static address.AddressManagement.Level.address;
import static address.AddressManagement.Level.district;
import static address.AddressManagement.Level.province;
import static address.AddressManagement.Level.ward;
import java.awt.Color;
import entity.AddressManagement.*;
import java.beans.Beans;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.xml.bind.annotation.XmlRootElement;
import javax.persistence.*;
/**
 *
 * @author QuestionBoy
 */


public class AddressManagementGUI extends javax.swing.JFrame {
    

    /**
     * Creates new form AddressManagementGUI
     */
    public AddressManagementGUI() {
        initComponents();
        level=address;
         if (!Beans.isDesignTime()) {
            AddressManagementPUEntityManager.getTransaction().begin();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddressManagementPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("AddressManagementPU").createEntityManager();
        addressQuery = java.beans.Beans.isDesignTime() ? null : AddressManagementPUEntityManager.createQuery("SELECT a FROM Address a");
        addressList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : addressQuery.getResultList();
        provinceQuery = java.beans.Beans.isDesignTime() ? null : ((javax.persistence.EntityManager)AddressManagementPUEntityManager).createNamedQuery("Province.findAll");
        provinceList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : ((javax.persistence.Query)provinceQuery).getResultList();
        add = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        provinceText = new javax.swing.JTextField();
        infoListView = new javax.swing.JScrollPane();
        infoList = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        add.setText("Thêm");
        add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMouseClicked(evt);
            }
        });
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        searchButton.setText("Tìm");
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
        });
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        provinceText.setForeground(new java.awt.Color(204, 204, 204));
        provinceText.setText("Nhập tên tỉnh");
        provinceText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                provinceTextMouseClicked(evt);
            }
        });

        infoList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Hà Nội", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        //added
        javax.persistence.EntityManager entity= javax.persistence.Persistence.createEntityManagerFactory("AddressManagementPU").createEntityManager();
        javax.persistence.Query query=entity.createNamedQuery("Address.findAll");
        java.util.List<Address> addressList=query.getResultList();
        DefaultListModel model= new DefaultListModel();
        for(Address address: addressList){
            String display= new String();
            display+=address.getName();
            //System.out.println(address.getWardid());
            query= entity.createNamedQuery("Ward.findByWardid").setParameter("wardid", address.getWardid());
            List<Ward> wardList=query.getResultList();
            for(Ward ward: wardList){
                display=display+","+ward.getName();
            }
            query= entity.createNamedQuery("District.findByDistrictid").setParameter("districtid", address.getDistrictid());
            List<District> districtList=query.getResultList();
            for(District district: districtList){
                display=display+","+district.getName();
            }
            query= entity.createNamedQuery("Province.findByProvinceid").setParameter("provinceid", address.getProvinceid());
            List<Province> provinceList=query.getResultList();
            for(Province province: provinceList){
                display=display+","+province.getName();
            }
            model.addElement(display);
        }
        infoList=new JList(model);
        //added
        infoList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                infoListValueChanged(evt);
            }
        });
        infoListView.setViewportView(infoList);

        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(add, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .addComponent(infoListView, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(provinceText, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(provinceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoListView, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        AddressManagementGUI.this.setVisible(false);
        //AddressManagementGUI.this.dispose();
        new NewAddGUI().setVisible(true);

    }//GEN-LAST:event_addActionPerformed

    private void provinceTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_provinceTextMouseClicked
        // TODO add your handling code here:
        provinceText.setText("");
        provinceText.setForeground(Color.black);
    }//GEN-LAST:event_provinceTextMouseClicked

    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        // TODO add your handling code here:
        
        //provinceList.clear();
        
        //DefaultListModel model= new DefaultListModel();
        //for(District a: data){
          //  model.addElement(a.getName());
           // System.out.println("1---"+ a.getName());
        //}
        //jList1 = new javax.swing.JList<>(model);
        
        //org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, data, jList1);
        //bindingGroup.addBinding(jListBinding);



    }//GEN-LAST:event_searchButtonMouseClicked

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        
            String provinceName=provinceText.getText();
            javax.persistence.Query query=AddressManagementPUEntityManager.createNamedQuery("Province.findByName").setParameter("name", provinceName+"%");
            java.util.List<Province> result=query.getResultList();
            DefaultListModel model= new DefaultListModel();
            for(Province a:result){
                model.addElement(a.getName());
            }
            infoList=new JList(model);
            infoList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                        infoListValueChanged(evt);
                    }
             });
            infoListView.setViewportView(infoList);
            level=province;
    }//GEN-LAST:event_searchButtonActionPerformed

    private void addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseClicked
        // TODO add your handling code here:
      
    }//GEN-LAST:event_addMouseClicked

    private void infoListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_infoListValueChanged
        // TODO add your handling code here:
        switch(level){
        case province:
            ListModel model1=infoList.getModel();
            provinceidGlobal=new String();
            String provinceName=(String) model1.getElementAt(evt.getFirstIndex());
            javax.persistence.Query query=AddressManagementPUEntityManager.createNamedQuery("Province.findByName").setParameter("name", provinceName);
            java.util.List<Province> provinceList=query.getResultList();
            for(Province province: provinceList){
                provinceidGlobal=province.getProvinceid();
            }
            query=AddressManagementPUEntityManager.createNamedQuery("District.findByProvinceid").setParameter("provinceid", provinceidGlobal);
            java.util.List<District> findedDistrictList=query.getResultList();
        
            DefaultListModel model= new DefaultListModel();
            for(District district:findedDistrictList){
                model.addElement(district.getName());
            }
            infoList=new JList(model);
            infoList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                        infoListValueChanged(evt);
                    }
                });
        
            infoListView.setViewportView(infoList);
        
            // Textfield
            provinceText.setText("Nhập tên huyện");
            provinceText.setForeground(new java.awt.Color(204, 204, 204));
            level=district;
            break;
        case district:
            model1=infoList.getModel();
            districtidGlobal =new String();
            String districtName=(String) model1.getElementAt(evt.getFirstIndex());
            javax.persistence.Query districtquery=AddressManagementPUEntityManager.createNamedQuery("District.findByNameAndProvince").setParameter("name", districtName).setParameter("provinceid", provinceidGlobal);
            java.util.List<District> districtList=districtquery.getResultList();
            for(District district: districtList){
                districtidGlobal=district.getDistrictid();
            }
            query=AddressManagementPUEntityManager.createNamedQuery("Ward.findByDistrictid").setParameter("districtid", districtidGlobal);
            java.util.List<Ward> findedWardList=query.getResultList();
        
            model= new DefaultListModel();
            for(Ward ward:findedWardList){
                model.addElement(ward.getName());
            }
            infoList=new JList(model);
            infoList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                        infoListValueChanged(evt);
                    }
                });
        
            infoListView.setViewportView(infoList);
        
            // Textfield
            provinceText.setText("Nhập tên khu");
            provinceText.setForeground(new java.awt.Color(204, 204, 204));
            level=ward;
            break;
        case ward:
            model1=infoList.getModel();
            wardidGlobal=new String();
            String wardName=(String) model1.getElementAt(evt.getFirstIndex());
            query=AddressManagementPUEntityManager.createNamedQuery("Ward.findByNameAndDistrict").setParameter("name", wardName).setParameter("districtid", districtidGlobal);
            java.util.List<Ward> wardList=query.getResultList();
            wardidGlobal=wardList.get(0).getWardid();
            query=AddressManagementPUEntityManager.createNamedQuery("Address.findByWardid").setParameter("wardid", wardidGlobal);
            java.util.List<Address> addressList=query.getResultList();
        
            model= new DefaultListModel();
            for(Address address:addressList){
                model.addElement(address.getName());
            }
            infoList=new JList(model);
            infoList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                        infoListValueChanged(evt);
                    }
                });
        
            infoListView.setViewportView(infoList);
        
            // Textfield
            provinceText.setText("");
            provinceText.setForeground(new java.awt.Color(204, 204, 204));
            level=address;
            break;
        default:
            break;
        }
    }//GEN-LAST:event_infoListValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        AddressManagementGUI.this.setVisible(false);
        new AddressManagementGUI().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
      /*  try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddressManagementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddressManagementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddressManagementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddressManagementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddressManagementGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager AddressManagementPUEntityManager;
    private javax.swing.JButton add;
    private java.util.List<entity.AddressManagement.Address> addressList;
    private javax.persistence.Query addressQuery;
    private javax.swing.JList<String> infoList;
    private javax.swing.JScrollPane infoListView;
    private javax.swing.JButton jButton1;
    private java.util.List provinceList;
    private javax.persistence.Query provinceQuery;
    private javax.swing.JTextField provinceText;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
   private Level level;
   private String provinceidGlobal;
   private String districtidGlobal;
   private String wardidGlobal;
}
